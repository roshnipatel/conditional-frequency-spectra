/// Based on stdpopsim three population out-of-Africa model from Gutenkunst et al. 2009 (excluding migration between branches)

/// N_YRI = 12300
/// N_ooA = 2100
/// N_CEU = 1000
/// N_CHB = 510
/// g_YRI = 0 (growth)
/// g_ooA = 0
/// g_CEU = 0.004
/// g_CHB = 0.0055
/// t_ooA = 5600 gen
/// t_CHB = 848 gen

initialize() {
	initializeMutationRate(0);
	initializeMutationType("m1", h, "f", s);
	initializeGenomicElementType("g1", m1, 1.0);
	initializeGenomicElement(g1, 0, 999999);
	initializeRecombinationRate(1e-8);
}

1 /* initialize frequency; split YRI (p1) and ooA (p2) */ {
	sim.addSubpop("p1", 12300);
        alleleCount = asInteger(p1.genomes.size() * freq);
        target = sample(p1.genomes, alleleCount);
        mut = target.addNewDrawnMutation(m1, 500000);
        defineConstant("MUT", mut);
        sim.addSubpopSplit("p2", asInteger(2100), p1);
}

4752 /* split CHB (p3) from CEU (p2) */ {
        if (MUT.isSegregating)
        {
        MUT.setValue("ooA", p2.genomes.mutationFrequenciesInGenomes(MUT));
        } else if (MUT.isFixed) {
        MUT.setValue("ooA", 1);
        }
        else {
        MUT.setValue("ooA", 0);
        }

	sim.addSubpopSplit("p3", 510, p2);
	p2.setSubpopulationSize(1000);
}

4752:5600 /* exponential growth */ {
	t = sim.generation - 4752;
	p2_size = round(1000 * (1 + 0.004)^t);
	p3_size = round(510 * (1 + 0.0055)^t);
	
	p2.setSubpopulationSize(asInteger(p2_size));
	p3.setSubpopulationSize(asInteger(p3_size));
}

5600 /* final output */ {
        if (MUT.isSegregating)
        {
        YRIfreq = p1.genomes.mutationFrequenciesInGenomes(MUT);
        CEUfreq = p2.genomes.mutationFrequenciesInGenomes(MUT);
        CHBfreq = p3.genomes.mutationFrequenciesInGenomes(MUT);
        } else if (MUT.isFixed) {
        YRIfreq = 1;
        CEUfreq = 1;
        CHBfreq = 1;
        } else {
        YRIfreq = 0;
        CEUfreq = 0;
        CHBfreq = 0;
        }
        freqDF = DataFrame("ancestral_freq", freq, "ooAfreq", MUT.getValue("ooA"), "YRIfreq", YRIfreq, "CEUfreq", CEUfreq, "CHBfreq", CHBfreq);
        writeFile(out, freqDF.serialize(format="tsv"));
}
