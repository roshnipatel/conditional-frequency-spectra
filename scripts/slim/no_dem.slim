initialize() {
	initializeMutationRate(0);
	initializeMutationType("m1", h, "f", s);
	initializeGenomicElementType("g1", m1, 1.0);
	initializeGenomicElement(g1, 0, 999999);
	initializeRecombinationRate(1e-8);
}

///
/// **Demography:**

1 /* initialize frequency; split p1 and p2 */ {
	sim.addSubpop("p1", 10000);
        alleleCount = asInteger(p1.genomes.size() * freq);
        target = sample(p1.genomes, alleleCount);
        mut = target.addNewDrawnMutation(m1, 500000);
        defineConstant("MUT", mut);
        sim.addSubpopSplit("p2", asInteger(10000), p1);
}

1000 /* split p3 from p2 */ {
        if (MUT.isSegregating)
        {
        MUT.setValue("ooA", p2.genomes.mutationFrequenciesInGenomes(MUT));
        } else {
        MUT.setValue("ooA", 0);
        }

	sim.addSubpopSplit("p3", 10000, p2);
}

2000 /* final output */ {
        if (MUT.isSegregating)
        {
        YRIfreq = p1.genomes.mutationFrequenciesInGenomes(MUT);
        CEUfreq = p2.genomes.mutationFrequenciesInGenomes(MUT);
        CHBfreq = p3.genomes.mutationFrequenciesInGenomes(MUT);
        } else if (MUT.isFixed) {
        YRIfreq = 1;
        CEUfreq = 1;
        CHBfreq = 1;
        } else {
        YRIfreq = 0;
        CEUfreq = 0;
        CHBfreq = 0;
        }
        freqDF = DataFrame("ancestral_freq", freq, "ooAfreq", MUT.getValue("ooA"), "YRIfreq", YRIfreq, "CEUfreq", CEUfreq, "CHBfreq", CHBfreq);
        writeFile(out, freqDF.serialize(format="tsv"));
}
